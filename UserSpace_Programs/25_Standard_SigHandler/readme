*************
Introduction
*************

01_SIG_BLK_UNBLK.c  


	This  program showcases how to block and unblock standard signals, and handle them synchronously in a parent-child process setup using signal handling mechanisms. It demonstrates the use of signals such as SIGINT, SIGUSR1, and SIGUSR2 for communication between processes. Let's walk through the steps to compile, execute, and observe the program in action.


02_SendSig_BtwnProcess.c

	This program demonstrates inter-process communication using signals between a parent and a child process. The parent process sends a SIGUSR1 signal to the child process, which is then handled by the child process. This program illustrates how signals can be used for simple communication between processes.


*******************************
Execution steps for RaspberryPi
*******************************
Step 1:
-----------
1. Set the ARCH and CROSS_COMPILE environment Variables
        $ export ARCH=arm64
        $ export CROSS_COMPILE=aarch64-linux-gnu-

2. Set the PATH to the Cross-Toolchain
        $ export PATH=${HOME}/ela_lab_exercises_rpi/rpi_build/toolchain/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin/:$PATH

Step 2:
-----------
3. Issue the make command
        $ make

Step 3:
-----------
4. Copy generated binary files to /usr directory of target using SCP.
        Syntax: scp <file> <target-name>@<ipaddress>:<destination-path>

        $ scp SIG_BLK_UNBLK SendSig_BtwnProcess root@10.10.10.1.27:/usr

Step 4:
-----------
5. Boot the board and go to /usr directory
6. Run the compiled program.

        # ./SIG_BLK_UNBLK
        # ./SendSig_BtwnProcess

************
Observation:
************


01_SIG_BLK_UNBLK


    1. Signal Handling:
        ->The child process handles the SIGUSR1 or SIGUSR2 signal when user enter no.1 or 2.
	->parent handles the SIGINT signal, when it receive from user it will increase the counter value.
        ->Each time a signal is received and handled, the corresponding message is printed, along with the count indicating how many times that signal has been received.

    2. Blocking and Unblocking:
        ->Blocking the SIGINT signal initially ensures that the parent process remains active and responsive until it unblocks the signal.
        ->Once unblocked, the parent process can be terminated by the Ctrl+\ or Ctrl+z keyboard interrupt.


	The program effectively demonstrates how signals can be manipulated, blocked, and unblocked in a parent-child process setup. By handling various signals synchronously and allowing custom signal transmission from user to processes, it showcases the flexibility and power of signal-based inter-process communication in Unix-like systems.


02_SendSig_BtwnProcess

Upon execution, the program performs the following steps:

    1. Process Creation:
        ->The parent process creates a child process using the fork() system call.

    2. Signal Handling:
        ->The child process registers a signal handler for the SIGUSR1 signal.

    3. Signal Sending:
        ->The parent process sends the SIGUSR1 signal to the child process after prompting the user to press Enter.

    4. Signal Reception:
        ->The child process receives the SIGUSR1 signal and invokes the signal handler function.

    5. Process Termination:
        ->The child process exits after handling the signal, and the parent process waits for the child to terminate.

    6. Program Completion:
        ->The parent process prints a message indicating that the child process has terminated.


	The program successfully demonstrates inter-process communication using signals, where the parent process sends a signal to the child process, and the child process handles the signal accordingly. This simple example illustrates the use of signals for basic communication between processes in a Unix-like operating system.
