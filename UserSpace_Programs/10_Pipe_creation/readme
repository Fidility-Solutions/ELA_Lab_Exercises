********************
Progarm Introduction
********************

1. Simple_pipe.c

	This program demonstrates inter-process communication (IPC) between a parent and a child process using a pipe. A pipe is a unidirectional communication channel that allows data to flow from one process to another. In this example, the parent process writes data to the pipe, and the child process reads data from it.

2.pipe_usng_dup.c

	This program demonstrates inter-process communication (IPC) using pipes in a parent-child process relationship. The parent process lists the contents of a directory using the ls command, and the child process counts the number of lines in the output using the wc -l command. Both the parent and child processes are replaced with new processes using execlp(). The program uses pipes to establish communication between the parent and child processes.



*******************************
Execution steps for RaspberryPi
*******************************
Step 1:
-----------
1. Set the ARCH and CROSS_COMPILE environment Variables
        $ export ARCH=arm64
        $ export CROSS_COMPILE=aarch64-linux-gnu-

2. Set the PATH to the Cross-Toolchain
        $ export PATH=${HOME}/ela_lab_exercises_rpi/rpi_build/toolchain/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin/:$PATH

Step 2:
-----------
3. Issue the make command
        $ make

Step 3:
-----------
4. Copy Simple_pipe and pipe_using_dup to /usr directory of target using SCP.
	Syntax: scp <file> <target-name>@<ipaddress>:<destination-path>

	$ scp Simple_pipe pipe_using_dup root@10.10.10.1.27:/usr

Step 4:
-----------
5. Boot the board and go to /usr directory
6. Run the compiled program.

	# ./Simple_pipe "Hello, child process!"
	# ./pipe_using_dup



************
Observation:
************

1. Simple_pipe

Upon execution, the program performs the following:

	# ./Simple_pipe "Hello, child process!"

	1. The parent process writes the given data to the pipe.
	2. The child process reads the data from the pipe and outputs it to the terminal.

2. pipe_using_dup
	
Upon execution, the program performs the following:

	# ./pipe_using_dup

    	1. Parent Process:
        	->The parent process (parent_<pid>) is replaced by the ls command.
        	->The output of ls is written to the pipe.

    	2. Child Process:
        	->The child process (child_<pid>) is replaced by the wc -l command.
        	->The wc -l command reads the output of ls from the pipe and counts the number of lines.


	3. The parent process lists the contents of the directory.
	4. The child process counts the number of lines in the ls output and prints the count to the terminal.










