#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <string.h>

#define UART_DEVICE "/dev/ttyS0"
#define BUFFER_SIZE 256

int main() {
    int uart_fd;
    struct termios options;
    char tx_buffer[BUFFER_SIZE] = "ello UART1!\n";
    char rx_buffer[BUFFER_SIZE];

    // Open the serial port
   uart_fd = open(UART_DEVICE, O_RDWR | O_NOCTTY);
    if (uart_fd == -1) {
        perror("Error opening serial port");
        return 1;
    }

    // Get the current serial port options
    if (tcgetattr(uart_fd, &options) != 0) {
        perror("Error getting serial port options");
        close(uart_fd);
        return 1;
    }

    // Set the baud rate to 9600
    cfsetispeed(&options, B9600);
    cfsetospeed(&options, B9600);

    // Set other serial port options
    options.c_cflag &= ~PARENB;     // Disable parity
    options.c_cflag &= ~CSTOPB;     // Use one stop bit
    options.c_cflag &= ~CSIZE;      // Clear the character size bits
    options.c_cflag |= CS8;         // 8 data bits
    options.c_cflag &= ~CRTSCTS;    // Disable hardware flow control
    options.c_cflag |= CREAD | CLOCAL; // Enable receiver, ignore modem control lines
    options.c_iflag &= ~(IXON | IXOFF | IXANY); // Disable software flow control
    options.c_oflag &= ~OPOST;      // Raw output mode
    options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); // Disable canonical mode and echoing

    // Set the new serial port options
    printf("set the new serial port options\n");
    if (tcsetattr(uart_fd, TCSANOW, &options) != 0) {
        perror("Error setting serial port options");
        close(uart_fd);
        return 1;
    }
	const char* tx_buffer1 = "Hello UART1! This is sample test code for data tx & rx over uart1 loopback\n";
//    write(uart_fd, message, strlen(message));
    // Write data to the serial port
    printf("writing date to UART1\n");
    ssize_t bytes_written = write(uart_fd,tx_buffer, strlen(tx_buffer1));
    if (bytes_written < 0) {
        perror("Error writing to serial port");
        close(uart_fd);
        return 1;
    } else if (bytes_written != strlen(tx_buffer1)) {
        fprintf(stderr, "Error: Could not write all data to serial port\n");
        close(uart_fd);
        return 1;
    }
    printf("data written successful to and num of bytes written to UART1:%ld\n",bytes_written);

    /* Read data from the serial port */
    printf("waiting to read data on UART1\n");

     ssize_t bytes_read = read(uart_fd, rx_buffer,BUFFER_SIZE);
   //  memcpy(rx_buffer1, rx_buffer, strlen(rx_buffer) + 1);
    if (bytes_read <0) {
        perror("Error reading from serial port");
        close(uart_fd);
        return 1;
    }
printf("Data read successfully on UART1\n");
    if (bytes_read > 0) {
        /* Null-terminate the received data */
        rx_buffer[bytes_read] = '\0';
	printf("Num bytes received:%d\n",bytes_read);
        printf("Received: %s\n", rx_buffer);
    } else {
        printf("No data received from serial port\n");
    }

    // Close the serial port
    close(uart_fd);

    return 0;
}

